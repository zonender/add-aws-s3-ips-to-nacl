---
- hosts: localhost
  connection: local
  gather_facts: no

  tasks:
  - name: run local python script to create nacl.json
    shell: ./main.py
    register: resultstdout

  - debug: msg="{{ resultstdout.stdout_lines }}"

  - name: register nacl.json content
    shell: cat ./main.py
    register: jsonnaclstdout

    # display json content
  - set_fact:
      from_lookup_with_from_json: "{{ lookup('file','nacl.json') | from_json }}"

  - debug: var=from_lookup_with_from_json
  #   # to display var content:
  # - debug:
  #     msg: "{{ rule_no }} - {{ protocol }}"

  #####################################################
  #####################################################
  #####################################################

  - name: "Set facts - Define json and vars"
    set_fact:
      json:  "{{lookup('file','nacl.json')}}"

  - name: "INGRESS - Create and associate production DMZ network ACL with DMZ subnets"
    vars:
      jf_rule_no: "{{ item | combine({ 'rule_no': item.rule_no | int }) }}"
      jf_port_from: "{{ item | combine({ 'port_from': item.port_from | int }) }}"
      jf_port_to: "{{ item | combine({ 'port_to': item.port_to | int }) }}"
    ec2_vpc_nacl:
      vpc_id: vpc-092733162f7694d18
      name: prod-dmz-nacl
      region: "{{ region }}"
      subnets: ['mysubnet3', 'mysubnet2']
      tags:
        CostCode: CC1234
        Project: phoenix
        Description: production DMZ
      ingress:
          # Example:
          # - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
          - ["{{ jf_rule_no.rule_no }}", "{{ item.protocol }}", "{{ item.allow_deny }}", "{{ item.cidr }}", "{{ item.icmp_type }}", "{{ item.icmp_code }}", "{{ jf_port_from.port_from }}", "{{ jf_port_to.port_to }}"]
      state: 'present'

    with_items: "{{ json.ingress }}"

  #####################################################
  #####################################################
  #####################################################

# ---
# - hosts: localhost
#   tasks:

#   - name: set facts
#     set_fact:
#       rule_no: "200"
#       json:  "{{lookup('file','data.json')}}"

#   - name: debug
#     set_fact:
#       json_f: "{{ item | combine({ 'rule_no': item.rule_no | int }) }}"
#     with_items: "{{ json.egress }}"

#   - name: debug
#     debug: msg="{{ json_f.rule_no | type_debug }}"






  # # looping attemps ingress
  # - name: "Display all rule numbers from json"
  #   debug:
  #     var: item.protocol
  #   loop: "{{ from_lookup_with_from_json | json_query('egress[*]') }}"

  # # looping attemps egress
  # - name: "Display all rule numbers from json"
  #   debug:
  #     var: item.protocol
  #   loop: "{{ from_lookup_with_from_json | json_query('ingress[*]') }}"

  # - name: "INGRESS - Create and associate production DMZ network ACL with DMZ subnets"
  #   ec2_vpc_nacl:
  #     vpc_id: vpc-092733162f7694d18
  #     name: prod-dmz-nacl
  #     region: "{{ region }}"
  #     subnets: ['mysubnet3', 'mysubnet2']
  #     tags:
  #       CostCode: CC1234
  #       Project: phoenix
  #       Description: production DMZ
  #     ingress:
  #         # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
  #         # - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
  #         - [item.rule_no, item.protocol, item.allow_deny, item.cidr, item.icmp_type, item.icmp_code, item.port_from, item.port_to]
  #     state: 'present'
  #   loop: "{{ from_lookup_with_from_json | json_query('ingress[*]') }}"

  # - name: "EGRESS - Create and associate production DMZ network ACL with DMZ subnets"
  #   ec2_vpc_nacl:
  #     vpc_id: vpc-092733162f7694d18
  #     name: SOLOMON
  #     region: "{{ region }}"
  #     subnets: ['mysubnet3', 'mysubnet2']
  #     tags:
  #       CostCode: CC1234
  #       Project: phoenix
  #       Description: production DMZ
  #     egress:
  #         # - [200, 'all', 'allow', '0.0.0.0/0', null, null, null, null]
  #         - [item.rule_no, item.protocol, item.allow_deny, item.cidr, item.icmp_type, item.icmp_code, item.port_from, item.port_to]
  #     state: 'present'
  #   loop: "{{ from_lookup_with_from_json | json_query('egress[*]') }}"